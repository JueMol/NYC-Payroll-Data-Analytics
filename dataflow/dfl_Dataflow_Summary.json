{
	"name": "dfl_Dataflow_Summary",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_sql_nycpayroll_2020",
						"type": "DatasetReference"
					},
					"name": "sourcepayroll2020"
				},
				{
					"dataset": {
						"referenceName": "ds_sql_nycpayroll2021",
						"type": "DatasetReference"
					},
					"name": "sourcepayroll2021"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_sql_summary",
						"type": "DatasetReference"
					},
					"name": "sinkTableSQL"
				},
				{
					"dataset": {
						"referenceName": "ds_payroll_summary_lake",
						"type": "DatasetReference"
					},
					"name": "sinkLake",
					"rejectedDataLinkedService": {
						"referenceName": "ls_datalake_project",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "ls_summary_ext_table",
						"type": "DatasetReference"
					},
					"name": "sinkSynapseExtTable"
				}
			],
			"transformations": [
				{
					"name": "union20and21"
				},
				{
					"name": "filterYear"
				},
				{
					"name": "derivedColumnTotalPaid"
				},
				{
					"name": "aggregatebyTotalPaidAgencyandYear"
				}
			],
			"scriptLines": [
				"parameters{",
				"     dataflow_param_fiscalyear as integer (2021)",
				"}",
				"source(output(",
				"          FiscalYear as integer,",
				"          PayrollNumber as integer,",
				"          AgencyID as integer,",
				"          AgencyName as string,",
				"          EmployeeID as integer,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AgencyStartDate as date,",
				"          WorkLocationBorough as string,",
				"          TitleCode as string,",
				"          TitleDescription as string,",
				"          LeaveStatusasofJune30 as string,",
				"          BaseSalary as double,",
				"          PayBasis as string,",
				"          RegularHours as double,",
				"          RegularGrossPaid as double,",
				"          OTHours as double,",
				"          TotalOTPaid as double,",
				"          TotalOtherPay as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sourcepayroll2020",
				"source(output(",
				"          FiscalYear as integer,",
				"          PayrollNumber as integer,",
				"          AgencyID as integer,",
				"          AgencyName as string,",
				"          EmployeeID as integer,",
				"          LastName as string,",
				"          FirstName as string,",
				"          AgencyStartDate as date,",
				"          WorkLocationBorough as string,",
				"          TitleCode as string,",
				"          TitleDescription as string,",
				"          LeaveStatusasofJune30 as string,",
				"          BaseSalary as double,",
				"          PayBasis as string,",
				"          RegularHours as double,",
				"          RegularGrossPaid as double,",
				"          OTHours as double,",
				"          TotalOTPaid as double,",
				"          TotalOtherPay as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sourcepayroll2021",
				"sourcepayroll2020, sourcepayroll2021 union(byName: false)~> union20and21",
				"union20and21 filter(FiscalYear>=$dataflow_param_fiscalyear) ~> filterYear",
				"filterYear derive(TotalPaid = RegularGrossPaid+TotalOTPaid+TotalOtherPay) ~> derivedColumnTotalPaid",
				"derivedColumnTotalPaid aggregate(groupBy(AgencyName,",
				"          FiscalYear),",
				"     TotalPaid = sum(TotalPaid)) ~> aggregatebyTotalPaidAgencyandYear",
				"aggregatebyTotalPaidAgencyandYear sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          FiscalYear as integer,",
				"          AgencyName as string,",
				"          TotalPaid as double",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          FiscalYear,",
				"          AgencyName,",
				"          TotalPaid",
				"     )) ~> sinkTableSQL",
				"aggregatebyTotalPaidAgencyandYear sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          AgencyName,",
				"          FiscalYear,",
				"          TotalPaid",
				"     )) ~> sinkLake",
				"aggregatebyTotalPaidAgencyandYear sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          AgencyName as string,",
				"          FiscalYear as string,",
				"          TotalPaid as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     outputAssertFailedRows: true,",
				"     mapColumn(",
				"          AgencyName,",
				"          FiscalYear,",
				"          TotalPaid",
				"     )) ~> sinkSynapseExtTable"
			]
		}
	}
}